title: Repository Cover Sheet
module_owner: Helen
--

This plugin enables adding a cover sheet to files on an output, if it has one.

h2(action). "hres_repo_cover_sheets:can_generate_cover_sheet"

This action determines who can generate cover sheets for all outputs.

h2(service). "hres_repo_cover_sheets:statement_prefill"

This service can be implemented by the client plugin to prefill the statement that the user then gets to edit before generating the cover sheet. This is used for copyright statements, for instance. Takes three parameters: output, file attribute, and a default spec; and returns a string. The string should have been rendered with std:text:paragraph in order to escape any attribute values that may be used to build the string, and to return it in the expected format.

The default spec has some useful defaults that your client may want to use:

@fileTypes@ for a mapping of file type code to an object containing: @title@, the display title for the file type; @attr@, the file attribute this type code should match to on the output; @statementAttr@, the attribute on the publisher object that contains the statement template for this file type; @form@, the default form to be displayed for editing the coversheet statement.

@interpolate@, a function which interpolates many of the likely desired interpolations from the template statements. It takes the statement string and output object as arguments.

A possible future client request is that the statements should vary according to output type as well. In which case, a third property should be added to this spec of a hierarchical refdict of type to corresponding statement attribute qualifier.

h2(service). "hres_repo_cover_sheets:coversheet_spec"

This service can be implemented by the client plugin to modify the cover sheet template. The function takes two parameters, output (as a StoreObject), and the attribute of the file being modified. Your implementation should return an object with any of the following properties:

| letterhead | Specify this file to use a template other than the default one for the first author's RI |
| view | Specify this object to overwrite or extend the default view provided by the plugin |
| formattedText | Specify this function, taking the parameter view, to overwrite the default body template, margins, and css |

h2(service). "hres_repo_cover_sheets:generate"

This service has been implemented in this plugin and takes two arguments, output and the attribute of the file for which a coversheet should be generated. It returns a URL generated by the fileTransformPipeline's urlForWaitThenRedirect.

h2(service). "hres_repo_cover_sheets:file_types"

This service can be implemented by the client plugin to modify the default file type map. It should return an object with the file types information, mapped as file type shorthand to an object containing the file attribute, the corresponding statement attribute on the publishers record, and the form that is to be edited before creating the cover sheet.

h2(service). "hres_repo_cover_sheets:add_available_tags"

Implement this service to add additional tags to the object editor display.

h3(arguments). Arguments

Service takes one argument which is the array of standard tags to be added to if necessary. The tags added should be of the form @[KEY, Description]@ where:

@KEY@ is the key needed to be found for interpolation
@Description@ is the human readable explanation of what the KEY will be replaced with.

h3(usage). Usage:

<pre>language=javascript
P.implementService("hres_repo_cover_sheets:add_available_tags", function(availableTags) {
    availableTags.push(["DOI", "The DOI from the output"]); 
});
</pre>

h2(service). "hres_repo_cover_sheets:interpolate_additional_tags"

Implement this service to interpolate any custom tags required by a client. Make sure the client knows about them by adding them to the list of available tags using the above service.

h3(usage). Usage:

<pre>language=javascript
P.implementService("hres_repo_cover_sheets:interpolate_additional_tags", function(str, output) {
    const DOI = output.first(A.DOI);
    str = str.replace(/\[DOI\]/g, (DOI ? DOI.toString() : "NO DOI"));
    return t
});